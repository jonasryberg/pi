<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jonas@pi]]></title>
  <link href="http://pi.ryberg.org/atom.xml" rel="self"/>
  <link href="http://pi.ryberg.org/"/>
  <updated>2014-09-15T19:09:35+00:00</updated>
  <id>http://pi.ryberg.org/</id>
  <author>
    <name><![CDATA[Jonas Ryberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test av Yo]]></title>
    <link href="http://pi.ryberg.org/blog/2014/09/27/test/"/>
    <updated>2014-09-27T21:10:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2014/09/27/test</id>
    <content type="html"><![CDATA[<p>Testar Yo:s nya api. Nu ska det gå att få reda på när bloggen uppdateras genom att skicka ett Yo till <a href="http://justyo.co/pibloggen">PIBLOGGEN</a>.</p>

<p><em>Uppdaterat</em> Men tyvärr verkar det inte fungera något vidare.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python, PiGlow och utomhustemperatur]]></title>
    <link href="http://pi.ryberg.org/blog/2014/02/09/python-piglow-och-utomhustemperatur/"/>
    <updated>2014-02-09T19:54:34+00:00</updated>
    <id>http://pi.ryberg.org/blog/2014/02/09/python-piglow-och-utomhustemperatur</id>
    <content type="html"><![CDATA[<p>Tidigt i höstas köpte jag en <a href="http://shop.pimoroni.com/products/piglow">Piglow</a> och kopplade in den på min Pi. Men jag kom aldrig längre än att testa att <a href="http://cymplecy.wordpress.com/2013/08/12/scratch-gpio-piglow-support/">blinka lite med Scratch</a>. Inspirerad av <a href="http://www.howtogeek.com/140063/build-an-led-indicator-with-a-raspberry-pi-for-email-weather-or-anything/all/">den här killen</a> som använder sin Pi och en lysdiod för att ha koll på vädret och <a href="http://issabove.com/iss-above-and-the-raspberry-pi/">den här snubben</a> som använder sin Piglow för att veta när internationella rymdstationen är på ingång, så tänkte jag att det var dags att se om jag kunde hitta på något liknande projekt.</p>

<p><img src="http://pi.ryberg.org/images/piglowtmp.jpg" title="Piglow visar temperaturen" alt="Piglow" /></p>

<p>Första testet var att skriva ett program som kunde använda information från <a href="http://www.wunderground.com/weather/api/">Weatherunderground</a> API för att berätta hur varmt eller kallt det känns ute, en feelometer. Jag utgick från <a href="http://www.howtogeek.com/140063/build-an-led-indicator-with-a-raspberry-pi-for-email-weather-or-anything/all/">den här beskrivningen</a> för att hantera anropen till Wunderground. Sedan gällde det att komma på ett fiffigt sätt att visa tempratur med de 18 lysdioderna på Piglow. Jag bestämde mig för ett system där blå led motsvarade -1 grad, vit led -10 grader, grön led 1 grad, röd led 10 grader och gul led 5 grader.</p>

<p>Python-koden nedan kräver biblioteket PyGlow för att fungera tillsammans med Piglow. Det kan hämtas <a href="https://github.com/benleb/PyGlow">här</a>.</p>

<p>Så här ser skriptet ut, glöm inte att fylla i din egen api-nyckel från Weatherunderground.</p>

<div><script src='https://gist.github.com/8775271.js'></script>
<noscript><pre><code># coding=latin1
# Feelometer - hämtar information om hur kallt vädret känns från wunderground och visar 
# den på en Raspberry pi med en PiGlow från Pimoroni
# 
# av Jonas Ryberg
# Kräver biblioteket PyGlow som hämtas på  https://github.com/benleb/PyGlow
#
# ------------------------------
# Så här ska dioderna på PiGlow tolkas
#
# blå led = -1
# vit led = -10
#
# grön led = 1
# röd led = 10
# gul led = 5
# ------------------------------

from urllib2 import urlopen
import json
from pyglow import PyGlow # importerar funktioner for att styra PiGlow
from time import sleep

pyglow = PyGlow()


# Hämta data för Stockholm från wunderground.com

req = urlopen('http://api.wunderground.com/api/din-api-nyckel/conditions/q/SE/stockholm.json')
parsed_json = json.load(req)
feelslike = int(parsed_json['current_observation']['feelslike_c'])

# Definierar variabler

styrka = 100
blue = 0
green = 0
yellow = 0
red = 0
white = 0

# feelslike = -3 # för test

# avgör vilka dioder som ska tändas


if feelslike == 0: #om nollgradigt
   blue = 1
   green = 1

if feelslike &gt; 0: #om plussgrader
   red = int(feelslike/10)
   yellow = int((feelslike-red*10)/5)
   green = feelslike-red*10-yellow*5
        
   if green &gt; 3:
      yellow = 0
      red = red + 1
      blue = 1
      green = 0
        
if feelslike &lt; 0: #om minusgrader
      feelslike = -feelslike
      white = int(feelslike/10)
      blue = feelslike - white*10
      if blue &gt; 3:
        white = white+1
        if blue == 4:
            green = 1
            yellow = 1
            blue = 0
        if blue == 5:
            yellow = 1
            blue = 0
        if blue == 6:
            yellow = 1
            blue = 1
        if blue &gt; 6:
            green = 10 - blue
            blue = 0

# för test
# -----------------------------
# print'blue = ' + str(blue)
# print'green = ' + str(green)
# print'yellow = ' + str(yellow)
# print'red = ' + str(red)
# print'white = ' + str(white)
# ------------------------------

'''
led-adresser

pyglow.led(18,100)#vit
pyglow.led(12,100)#vit
pyglow.led(6,100) #vit


pyglow.led(5,100) #blå
pyglow.led(11,100)#blå
pyglow.led(17,100)#blå

pyglow.led(16,100)#grön
pyglow.led(10,100)#grön
pyglow.led(4,100) #grön

pyglow.led(3,100) #gul  
pyglow.led(9,100) #gul
pyglow.led(15,100) #gul

pyglow.led(2,100) #orange
pyglow.led(8,100) #orange
pyglow.led(14,100) #orange

pyglow.led(1,100) #röd
pyglow.led(7,100) #röd
pyglow.led(13,100) #röd
'''

pyglow.all(0)

# tänd led

while white &gt; 0:
    pyglow.led((white*6),styrka)
    white = white - 1

start = 1
while red &gt; 0:
    pyglow.led(start,styrka)
    red = red -1
    start = start + 6

start = 3
while yellow &gt; 0:
    pyglow.led(start,styrka)
    yellow = yellow -1
    start = start + 6

start = 4
while green &gt; 0:
    pyglow.led(start,styrka)
    green = green -1
    start = start + 6

start = 5
while blue &gt; 0:
    pyglow.led(start,styrka)
    blue = blue - 1
    start = start + 6</code></pre></noscript></div>


<p>Om du vill att temperaturen ska uppdateras krävs såklart att skriptet körs med jämna intervall, till exempel med ett sk cron job. Mer info om hur du får igång ett sådant finns <a href="http://www.howtogeek.com/101288/how-to-schedule-tasks-on-linux-an-introduction-to-crontab-files/">här</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rövarspråket i Python]]></title>
    <link href="http://pi.ryberg.org/blog/2014/01/25/rovarspraket-i-Python/"/>
    <updated>2014-01-25T17:35:02+00:00</updated>
    <id>http://pi.ryberg.org/blog/2014/01/25/rovarspraket-i-Python</id>
    <content type="html"><![CDATA[<p>Jag har börjat gå igenom övningarna i Python hos <a href="http://www.codecademy.com/">Codeacademy</a>. Pedagogiskt och bra, men hur kul är det att skapa ett program för att skriva i Pylatin? Klassiska rövarspråket är att föredra tycker jag så jag satte ihop ett eget exempel.</p>

<div><script src='https://gist.github.com/8619200.js'></script>
<noscript><pre><code># coding=latin1
# Pythonskript för att skapa rövarspråk
# av Jonas Ryberg


print &quot;Rövarspråksgenerator&quot;



exit = &quot;J&quot;

while exit != &quot;N&quot; :
    woworordod = str()
    original = raw_input('Skriv in ett ord &gt; ')

    if len(original) &gt; 0 and original.isalpha():
    
        word = original.lower()
    
        letter_index = 0
    
        while letter_index &lt;= len(word)-1:
    
            letter = word[letter_index]
    
            if letter == &quot;a&quot; or letter == &quot;e&quot; or letter == &quot;i&quot; or letter == &quot;o&quot; or letter == &quot;u&quot;:
            
                woworordod = woworordod + letter
                letter_index = letter_index + 1
        
            else:
                woworordod = woworordod + letter + &quot;o&quot; + letter
                letter_index = letter_index + 1
            
            

    else:
        print 'inget ord eller mer än ett ord'
    
    print woworordod
    exit = raw_input(&quot;En gång till? (J/N) &gt;&quot;)</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nypressat schackintresse]]></title>
    <link href="http://pi.ryberg.org/blog/2014/01/07/nypressat-schackintresse/"/>
    <updated>2014-01-07T16:12:02+00:00</updated>
    <id>http://pi.ryberg.org/blog/2014/01/07/nypressat-schackintresse</id>
    <content type="html"><![CDATA[<p>Visserligen är <a href="http://ludemegames.com/chess2/">Schack 2 på gång</a>, men jag jobbar fortfarande vidare på att bemästra originalet. Arbetet har kommit igång efter att min äldste son börjat intressera sig för spelet och jag har blivit hans närmast tillgänglige motståndare.</p>

<p>För att få fart på det egna spelandet kan man givetvis ta ett vanligt schackdatorprogram till hjälp. Men roligare är att spela mot vänner. Under julhelgen har jag därför spelat ett tiotal matcher korrespondansschack med vänner och familj. Appen vi använt heter <a href="https://play.google.com/store/apps/details?id=chesspresso.client.android.f&amp;hl=en">Chesspresso</a> och finns för Androidtelefoner.</p>

<p>Det finns säkert en uppsjö liknande appar, men Chesspresso gör jobbet väl med ren design och enkla funktioner för att stega fram och tillbaka i ett parti, möjlighet att spara partierna och enkel statistik över hur matcherna gått. Det går att spela mot slumpvisa användare i nätverket, men jag har bara testat att spela mot vänner. Det är helt enkelt roligare att vinna eller förlora mot någon man känner. Appen kostar 25 kronor om man vill spela utan reklam. Med tanke på hur ful den är så är det värt priset.</p>

<p>Ytterligare en app som vi använt flitigt i jul är <a href="https://play.google.com/store/apps/details?id=com.Hefestus.ChessClock.Free&amp;hl=en">Real Chess Clock</a>. En enkel app som fungerar som en schackklocka och dessutom är gratis och utan irriterande reklam. Dock krävs betalning om alla funktioner ska användas.</p>

<p><img src="http://pi.ryberg.org/images/chesspresso.webp" alt="Chesspresso" />
<em>Chesspresso för digitalt korrespondansschack</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ir-foto med pi:n]]></title>
    <link href="http://pi.ryberg.org/blog/2014/01/05/ir-foto-med-pi-n/"/>
    <updated>2014-01-05T19:05:01+00:00</updated>
    <id>http://pi.ryberg.org/blog/2014/01/05/ir-foto-med-pi-n</id>
    <content type="html"><![CDATA[<p>Pi-noir, Raspberry Pi-foundations kamera utan ir-filter har legat i min låda ett tag utan att jag egentligen haft tid att testa den. Men igår tog jag mig tid att montera den. Den fungerar egentligen precis på samma sätt och med samma kommandon som den vanliga kameran med det undantaget att Pi-noir saknar ir-filter framför kamerans sensor. Pi-kameran är precis som alla digitalkameror kännslig för ir-ljus. I normala fall stör det bildkvaliteten men vill man skapa fina effekter eller forografera i mörker kan det vara riktigt användbart.</p>

<p>Bilderna jag tog här hemma är dock inte mycket att yvas över. Roligast verkar det vara att fotografera utomhus med filter och mycket gröna växter. Jag nöjde mig med att plåta en pelargon.</p>

<p><img src="http://pi.ryberg.org/images/ir-blomma.jpg" alt="blomma fotad med ir-kamera" />
<em>Pelargon fotad med ir-kamera och blått filter</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intervallfoto 2.0]]></title>
    <link href="http://pi.ryberg.org/blog/2013/11/10/intervallfoto-2-0/"/>
    <updated>2013-11-10T14:06:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2013/11/10/intervallfoto-2-0</id>
    <content type="html"><![CDATA[<p>I förra <a href="http://pi.ryberg.org/blog/2013/10/26/webbstyrd-pi-kamera/">inlägget</a> berättade jag hur jag och min bror biologen styrde min Raspberry pi-kamera via en webbserver. Nästa steg är att på ett enkelt sätt få den att ta intervallbilder för att skapa en enkel stop-motion-film. Tanken är förstås att kunna placera ut Pi:n på ett lämpligt ställe, kolla att allt ser bra ut genom att ta en bild och sedan sätta igång intervallfotot. För att göra det enklare ska vi också låta Pi:en räkna ut hur många bilder den behöver ta för att skapa en film av en viss längd.</p>

<!-- more -->


<p>Första steget är att ändra den ursprungliga webbsidan något så att det blir möjligt att ange under vilken tidsperiod kameran ska fotografera och hur lång den slutliga filmen ska bli.</p>

<p>Ungefär så här blir koden till sidan då:</p>

<pre><code>&lt;html&gt;&lt;form method="get" action="/cgi-bin/kamera.cgi"&gt;&lt;input type="submit" value="Ta bild"&gt;&lt;/form&gt;
&lt;br&gt;&lt;br&gt;
&lt;form method="get" action="/cgi-bin/timelaps.cgi"&gt;Film längd: &lt;input type="text" name="film_langd" value="1"min&lt;br&gt;
Inspelnings längd: &lt;input type="text" name="insp_tid" value="1"h&lt;br&gt;&lt;input type="submit" value="intervallfoto"&gt;&lt;/form
&lt;/html&gt;
</code></pre>

<p>Nästa steg är att se till att det finns ett perl-script som kan hämta värdena som matats in i webbformuläret och be kameran att starta intervallfotot. I exemplet har vi döpt den filen till timelaps.cgi. Koden i filen ser ut så här:</p>

<pre><code>#! /usr/bin/perl
use strict;
print "Content-type: text/html\n\n";
my $film_langd;
my $insp_tid;
if ($ENV{'QUERY_STRING'} =~ /film_langd=([0-9\.]+)/) { $film_langd=$1; }
if ($ENV{'QUERY_STRING'} =~ /insp_tid=([0-9\.]+)/) { $insp_tid=$1; }
print "&lt;html&gt;";
$insp_tid *= 3600000;
my $intervall= $insp_tid/($film_langd*60*24);
print "&lt;p&gt;sudo /usr/bin/raspistill -o \"/var/www/pictures/ivbild%i.jpg\" -t $insp_tid -vf -hf -w 1920 -h 1080 -tl $intervall -n&lt;/p&gt;";
system "sudo /usr/bin/raspistill -o \"/var/www/pictures/ivbild%i.jpg\" -t $insp_tid -vf -hf -w 1920 -h 1080 -tl $intervall -n";
print "&lt;p&gt;H&amp;auml;r &amp;aumlr din.&lt;/p&gt;";
print '&lt;a href="http://pi.ryberg.org/pictures/film.h264"&gt;film!&lt;/a&gt;';
print "&lt;/html&gt;";
</code></pre>

<p>Koden räknar ut hur många bilder som ska tas för att det ska gå att skapa en film av önskad längd med 24 bilder per sekund. Om man väljer för kort filmtid i förhållande till inspelningstiden blir det problem eftersom kameran inte hinner ta bilderna tillräckligt fort. I praktiken är det dock knappast ett problem.</p>

<p>Jag passade också på att lägga in en knapp för att slå av pi:n när plåtandet är klart. Den koden finns här:</p>

<pre><code>#! /usr/bin/perl 
system "sudo /sbin/shutdown -h now";
</code></pre>

<p>Glöm inte att köra <code>chmod +x</code> på alla filerna med kod så att webservern kan starta dem.</p>

<p>Här är resultatet av mitt första test. Jag har använt programmet mencoder för att foga samman bilderna till en film, kolla <a href="http://pi.ryberg.org/texter/intervallfoto_med_Raspberry_Pi">den här texten</a> om du vill veta hur.</p>

<iframe width="560" height="315" src="http://pi.ryberg.org//www.youtube.com/embed/akjcLrhI0mM" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webbstyrd pi-kamera]]></title>
    <link href="http://pi.ryberg.org/blog/2013/10/26/webbstyrd-pi-kamera/"/>
    <updated>2013-10-26T14:06:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2013/10/26/webbstyrd-pi-kamera</id>
    <content type="html"><![CDATA[<p>Regning oktoberlördag. Barnen är på utflykt och jag och <a href="http://www.anst.uu.se/marry118/">min bror biologen</a> bestämmer oss för att leka med Raspeberry Pi-cam. Tanken är att bygga en kamera som vi kan styra via en webbsida. Första steget är att installera en webbserver. Efter att ha strulat en bra stund med lighttpd, eftersom den enligt internets samlade visdom kräver mindre resurser än klassiska Apache, så väljer vi i alla fall Apache då den ger felmeddelanden som faktiskt kan tolkas.</p>

<!-- more -->


<pre><code>sudo apt-get install apache
</code></pre>

<p>tar hand om att installera Apache-servern på pi:n.
För att testa om det fungerat är det bra att surfa in till Raspberryn från en annan dator. Att kolla den lokala ip-adressen görs enkelt i</p>

<pre><code>/sbin/ifconfig
</code></pre>

<p>Om allt fungerat ska du se en testsida från Apache.</p>

<p>Fungerar allt som det ska är det dags för nästa steg, att skapa en webbsida som kan användas för att styra Raspberry Cam. På Raspberry Pi skapar vi en fil som heter kamera.html med</p>

<pre><code>sudo nano kamera.html
</code></pre>

<p>I Nano bygger vi först en enkel sida med en kameraknapp som sedan ska starta ett Perl-script som kan styra kameran. Vi använder &ldquo;form&rdquo; för att senare kunna lägga till olika parametrar till raspistill, kommandot som sköter pi-kameran.</p>

<pre><code>&lt;html&gt;

&lt;form method="get" action="/cgi-bin/kamera.cgi"&gt;
&lt;input type="submit" value="Ta bild"&gt;
&lt;/form&gt;

&lt;/html&gt;
</code></pre>

<p>Sidan sparar vi i www-foldern för att Apache ska kunna hitta den.</p>

<p>Nästa steg är att skapa ett Perl-script som kan ta bilder. Det visade sig vara ganska krångligt att få att fungera med rättigheterna som krävs för att kameramodulen ska kunna spara bilden. Men till slut fungerade det <a href="http://fc07.deviantart.net/fs71/i/2012/116/4/f/great_success_by_merionminor-d4xmjry.png">Great success!</a></p>

<p>Lösningen blev att lägga till www-data som sudo utan lösenord och känns inte helt tillfredsställande.</p>

<p>Perl-scriptet i kamera.cgi blev så här:</p>

<pre><code>#! /usr/bin/perl

use strict;
print "Content-type: text/html\n\n";
print "&lt;html&gt;";
system "sudo /usr/bin/raspistill -o \"/var/www/bild.jpg\" -vf -n;
print '&lt;img src="http://pi.ryberg.org/bild.jpg"&gt;';
print "&lt;/html&gt;";
</code></pre>

<p>Glöm inte heller att köra chmod +x på filen för att den ska kunna köras av webbservern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leverans av liten bit]]></title>
    <link href="http://pi.ryberg.org/blog/2013/07/18/leverans-av-liten-bit/"/>
    <updated>2013-07-18T14:06:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2013/07/18/leverans-av-liten-bit</id>
    <content type="html"><![CDATA[<p><img src="http://pi.ryberg.org/images/skakbit_i_antistat.jpg" alt="Skakbiten" /></p>

<p>Så kom den då till slut, <a href="blog/2013/07/10/sma-bitar-stora-problem/">skakbiten</a>. UPS försökte lämna den hemma hos mig vid sex tillfällen utan att lyckas.  Vi kom då överens om att de skulle försöka lämna den i sommarstugan i stället. Efter ett tag kom dock UPS på att den ligger i en “remote area”. Den fiffiga lösningen blev till slut Posten, som ju faktiskt har ett system för att leverera paketet också till oss som inte har en reception med personal hemma.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Små bitar – stora problem]]></title>
    <link href="http://pi.ryberg.org/blog/2013/07/10/sma-bitar-stora-problem/"/>
    <updated>2013-07-10T14:06:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2013/07/10/sma-bitar-stora-problem</id>
    <content type="html"><![CDATA[<p><img src="http://pi.ryberg.org/images/skakbit.jpg" alt="Tandborstrobot" /></p>

<p>För några veckor sedan köpte jag ett paket Little bits till barnen. Tyvärr gick en av bitarna, den så kallade skakbiten, sönder nästan direkt.</p>

<p>Jag mejlade företagets support som beklagade att den gått sönder, bad mig be barnen vara mer försiktiga, och lovade att skicka en ny bit. Bra service med andra ord.</p>

<p>Nu väntar vi bara på att UPS ska lösa transporten. Första delen av vägen, den från Shenzen till Arlanda gick fort. Värre verkar det vara att leverera paketet hem till mig. UPS ska ha varit här fem gånger de senaste veckorna utan att ha lyckas, trots försök med lämnat telefonnummer, portkod och andra instruktioner. Men vem vet. Någon gång kanske våra vägar möts, mina och mannen/kvinnan från UPS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intervallfoto med Raspberry Pi]]></title>
    <link href="http://pi.ryberg.org/blog/2013/05/26/intervallfoto-med-rasoberry-pi/"/>
    <updated>2013-05-26T14:06:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2013/05/26/intervallfoto-med-rasoberry-pi</id>
    <content type="html"><![CDATA[<object width="640" height="360"><param name="movie" value="//www.youtube.com/v/2a77FLHoxE4?version=3&amp;hl=en_US"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://pi.ryberg.org//www.youtube.com/v/2a77FLHoxE4?version=3&amp;hl=en_US" type="application/x-shockwave-flash" width="640" height="360" allowscriptaccess="always" allowfullscreen="true"></embed></object>


<p>Jag slog till och köpte den nya kameramodulen till Raspberry Pi när jag besökte Webhallen i Fruängen i går. Den ser inte mycket ut för världen och som kamera betraktat kan den närmast jämföras med en mycket enkel mobilkamera utan autofokus. Den monteras via en plattkabel direkt på datorkortet, allt som sedan krävs för att den ska fungera är en uppdatering av datorns firmware med: <code>sudo apt-get update</code>
och
<code>sudo apt-get upgrade</code>.</p></p>

<!-- more -->


<p>Sedan behöver kameran aktiveras i <code>raspi-config</code>.</p>

<p>Kameran kontrolleras från terminalfönstret med <code>raspivid</code> för video och <code>raspistill</code> för bilder. Alla kamerans funktioner, som att välja iso-värde, längd på inspelad film eller att tala om vilken fil bilden ska sparas till görs genom tillägg direkt i terminalen.</p>

<p>En av de roligare funktionerna är möjligheten att göra time-laps eller intervallfoton. Jag riggade upp min Pi lite snyggt i fönstret för att testa att ta en bildserie.</p>

<p><img src="http://pi.ryberg.org/images/picam-300x195.jpg" title="Pi i fönster" alt="Pi i fönster" /></p>

<p>Det är inte helt praktiskt att fota med hjälp av kommandon i terminalfönstret, men ganska kul. Följande rad använde jag för att göra ta bilderna som jag sedan använt till filmen ovan:</p>

<p><code>raspistill -o &ldquo;bild%i.jpg&rdquo; -vf -hf -t 3600000 -tl 5000</code></p>

<p>Kommandot <code>raspstill</code> talar om att jag vill ta en bild, <code>-o &ldquo;bild%i.jpg&rdquo;</code> berättar att jag vill att bilderna ska sparas som bild1.jpg, bild2.jpg, bild3.jpg osv. Tilläggen <code>-vf</code> och <code>-hf</code> betyder att bilden ska först spegelvändas (kameran tar alla bilder spegelvända) och sedan vändas upp och ned (jag hade satt kameran upp och ned).</p>

<p>Slutligen betyder <code> -t 36000000</code> att jag vill att fotograferingen ska pågå i 36 miljoner millisekunder, dvs en timma, och <code>-tl 5000</code> är tiden mellan varje bild.</p>

<p>Efter en timma fanns bildserien klar i en mapp på minneskortet i datorn. Med ledning av den <a href="http://designspark.com/blog/time-lapse-photography-with-the-raspberry-pi-camera">här killen</a> hittade jag programmet Mencoder som kan användas för att foga samman bilderna till en film. Mencoder installeras med:
&lt;<code>sudo apt-get install mencoder</code></p>

<p>För att Mencoder ska kunna hitta rätt bilder i rätt ordning behöver den en textfil med alla filnamn. Den skapas enkelt enligt följande:</p>

<p><code>ls -t -r *.jpg &gt; bilder.txt</code></p>

<p><code>ls</code> listar som bekant alla filer i en mapp, <code>-t -r</code> talar om att du vill ha dem i tidsordning med den äldsta först <code> *.jpg</code> att det bara ska vara bildfiler och <code>&gt; bilder.txt</code> att allt ska skrivas i en fil ned just det namnet.</p>

<p>Sedan snodde jag instruktionerna för Mencoder rakt av så här:</p>

<p><code>mencoder -nosound -ovc lavc -lavcopts vcodec=mpeg4:aspect=16/9:vbitrate=8000000 -vf scale=1920:1080 -o tlcam.avi -mf type=jpeg:fps=24 mf://@bilder.txt</code></p>

<p>Det gjorde att filmen blev utdragen i 16:9 format och inte det format som bilderna var tagna i från början. Nästa försök ska jag se till att fånga bilderna i samma format som filmen är tänkt att vara i. Det borde spara tid när filmen kodas och minne när bilderna tas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emil bygger tandborstrobot]]></title>
    <link href="http://pi.ryberg.org/blog/2013/05/21/emil-bygger-tandborstrobot/"/>
    <updated>2013-05-21T14:06:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2013/05/21/emil-bygger-tandborstrobot</id>
    <content type="html"><![CDATA[<p><img src="../images/tandborstspoke-225x300.jpg" alt="Tandborstrobot" /></p>

<p>Jag köpte var sitt paket <a href="http://littlebits.com/">Littlebits</a> till barnen när jag besökte USA i veckan. Emil använde några av bitarna till att bygga en tandborstrobot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress på Raspberry Pi]]></title>
    <link href="http://pi.ryberg.org/blog/2013/05/06/wordpress-pa-raspberry-pi/"/>
    <updated>2013-05-06T14:06:59+00:00</updated>
    <id>http://pi.ryberg.org/blog/2013/05/06/wordpress-pa-raspberry-pi</id>
    <content type="html"><![CDATA[<p>Jag vet inte riktigt vad jag ska ha den till, men nu finns i alla fall en WordPress-blogg på en <a href="http://www.raspberrypi.org/">Raspberry Pi</a> i min garderob. Det tog en stund att få det hela att fungera. Och det krävde lite hjälp från min <a href="http://www.anst.uu.se/marry118/">bror biologen</a>. Vi får se hur länge det är kul och hur länge den får stanna.</p>

<p><img src="images/raspi-server.jpg" alt="En liten server" /></p>

<p><em>En Pi-server fritt hängande i usb-sladden från routern. Det visade sig nämligen att usb-kontakten på min router ger tillräckligt med kräm för att driva pi:n.</em></p>
]]></content>
  </entry>
  
</feed>
